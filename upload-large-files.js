const fs = require('fs');
const path = require('path');

// URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)
const deploymentUrl = 'https://www.xn----dtbgjpnkpl3h.xn--p1acf';

async function uploadLargeFile(filePath, filename) {
  try {
    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É ${filename} (—Ä–∞–∑–º–µ—Ä: ${(fs.statSync(filePath).size / 1024 / 1024 / 1024).toFixed(2)} GB)...`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const fileStream = fs.createReadStream(filePath);
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª ${filename} –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ—Ç–æ–∫–æ–º...`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –ø–æ—Ç–æ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
     const response = await fetch(`${deploymentUrl}/api/upload-large`, {
       method: 'POST',
       headers: {
         'Content-Type': 'application/octet-stream',
         'x-filename': filename
       },
       body: fileStream,
       duplex: 'half', // –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
       // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 –º–∏–Ω—É—Ç
       signal: AbortSignal.timeout(10 * 60 * 1000)
     });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
    }

    const result = await response.json();
    console.log(`‚úÖ –§–∞–π–ª ${filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!`);
    console.log(`üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: ${result.url}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä: ${(result.size / 1024 / 1024).toFixed(2)} MB`);
    
    return result;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${filename}:`, error);
    throw error;
  }
}

async function uploadAllLargeFiles() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä...');
  console.log('üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000\n');

  const publicDir = path.join(__dirname, 'public');
  
  // –ò—â–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const testFiles = ['ROZYSK-Setup.exe'];
  
  for (const filename of testFiles) {
    const filePath = path.join(publicDir, filename);
    
    if (fs.existsSync(filePath)) {
      const stats = fs.statSync(filePath);
      const sizeInGB = (stats.size / (1024 * 1024 * 1024)).toFixed(2);
      console.log(`üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: ${filename} (${sizeInGB} GB)`);
      
      try {
        const result = await uploadLargeFile(filePath, filename);
        console.log(`‚úÖ ${filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:`, result);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${filename}:`, error.message);
      }
      
      console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    } else {
      console.log(`‚ö†Ô∏è –§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ public`);
    }
  }
  
  console.log('üéâ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
uploadAllLargeFiles().catch(console.error);